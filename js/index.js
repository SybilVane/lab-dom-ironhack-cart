// ITERATION 1

function updateSubtotal(product) {
  // get the price of product from price span in "product" (parameter will be defined in another function) and store it in a variable
  const price = product.querySelector('.price span');

  // get the quantity selected by user from quantity input and and store it in a variable
  const quantity = product.querySelector('.quantity input');

  // multiply the price by number of products and get subtotal
  const subTotProduct = price.textContent * quantity.value;

  // update subtotal on the page
  product.querySelector('.subtotal span').textContent = subTotProduct;

  // return the value of subtotal so it can be used by other functions calling this one
  return subTotProduct;
}

function calculateAll() {
  // ITERATION 2

  // store product list in a variable, selecting all elements with class product in the document (node list)
  const prodsList = document.querySelectorAll('.product');

  let subtotalEveryProd = 0; // accumulator for values produced by every function call using our prodsList

  // iterate over list of products, add up every node list item generated by function call on updateSubtotal using our prodsList
  for (let i = 0; i < prodsList.length; i++) {
    subtotalEveryProd += updateSubtotal(prodsList[i]);
  }

  // ITERATION 3

  // store values created dynamically in the DOM coming from the subtotal class of every product
  const prodsListPrices = document.querySelectorAll('.subtotal span');

  let totalPrice = 0; // accumulator for values coming from node list generated by selecting (prodsListPrices)

  // iterate over prodListPrices, add up values, transform a string into a number (values in the class subtotal are NOT originally numbers)
  for (let i = 0; i < prodsListPrices.length; i++) {
    totalPrice += Number(prodsListPrices[i].textContent);
  }

  // update DOM, change number shown in totalPrice
  document.querySelector('#total-value span').textContent = totalPrice;

  // return totalPrice (I may need it further on)
  return totalPrice;
}

// ITERATION 4

function removeProduct(event) {
  // the event 'click' is triggered by the button remove, use it as reference point to move up the DOM
  const target = event.currentTarget.parentNode.parentNode; // the table row where the button is
  const subTotValue = target.querySelector('.subtotal span').textContent;
  const totalPrice = document.querySelector('#total-value span').textContent;

  // update DOM, change number shown in totalPrice
  document.querySelector('#total-value span').textContent =
    Number(totalPrice) - Number(subTotValue);

  target.remove(); // remove the entire row AFTER updating totalPrice (otherwise the subtraction will not work)
}

// ITERATION 5

function createProduct(event) {
  // Obtain values from inputs

  const target = event.currentTarget.parentNode.parentNode; // the row of tfoot, the button create has an eventListener set on the click. In other words: click -> button -> cell -> row
  const productName = target.querySelector('.new-product-name input').value; // get value from new product cell
  const productPrice = target.querySelector('.new-product-price input').value; // get value from new product price

  // Create row

  const table = target.parentNode.parentNode;
  // event.currentTarget.parentNode.parentNode.parentNode.parentNode
  // in other words: click -> button -> cell -> row -> tfoot -> table

  const tbody = table.querySelector('tbody');

  const newRow = document.createElement('tr'); // new row
  newRow.classList = 'product'; // give class 'product' to the row just created
  tbody.appendChild(newRow); // append the new row to table

  // Add product name

  const newProductNameCell = document.createElement('td'); // new cell
  newProductNameCell.classList = 'name'; // give class 'name' to cell just created
  newRow.appendChild(newProductNameCell); // append the cell to the row

  const productNameSpan = document.createElement('span'); // new span
  productNameSpan.textContent = productName; // give a text to the span created
  newProductNameCell.appendChild(productNameSpan); // append the span to the cell

  // Add product price

  const newProductPriceCell = document.createElement('td'); // new cell
  newProductPriceCell.classList = 'price'; // give class 'price' to the cell created
  newRow.appendChild(newProductPriceCell); // append cell to the row

  const productPriceSpan = document.createElement('span'); // new span
  newProductPriceCell.textContent = '$'; // create textContent for cell OUTSIDE the span (I'll need the number only or I'll get NaN)
  productPriceSpan.textContent = parseFloat(productPrice).toFixed(2); // this is to add .00 after price
  newProductPriceCell.appendChild(productPriceSpan); // append span to the cell

  // Add product quantity cell (0)

  const newProductQuantityCell = document.createElement('td'); // new cell
  newProductQuantityCell.classList = 'quantity'; // give class quantity to the cell created
  newRow.appendChild(newProductQuantityCell); // append cell to the row

  const quantityInput = document.createElement('input'); // new input
  quantityInput.type = 'number';
  quantityInput.min = '0'; // all quantity input attributes
  quantityInput.value = '0';
  quantityInput.placeholder = 'Quantity';
  newProductQuantityCell.appendChild(quantityInput); // append input to the cell

  // Add product subtotal ($0)

  const newSubtotalCell = document.createElement('td'); // new cell
  newSubtotalCell.textContent = '$'; // text content for cell outside the span
  newSubtotalCell.classList = 'subtotal'; // give class subtotal to the cell created
  newRow.appendChild(newSubtotalCell); // add cell to the row

  const subTotal = document.createElement('span'); // new span
  subTotal.textContent = '0'; // text content for span
  newSubtotalCell.appendChild(subTotal); // append span to cell

  // Add button Remove

  const newRemoveBtnCell = document.createElement('td'); // new cell
  newRemoveBtnCell.classList = 'action'; // give class 'action' to cell
  newRow.appendChild(newRemoveBtnCell); // append cell to row

  const newRemoveBtn = document.createElement('button'); // new button
  newRemoveBtn.classList = 'btn btn-remove'; // give class 'btn' and 'btn-remove' to button
  newRemoveBtn.textContent = 'Remove'; // give text content to button
  newRemoveBtnCell.appendChild(newRemoveBtn); // append button to cell

  newRemoveBtn.addEventListener('click', removeProduct); // VERY IMPORTANT: add event listener to button

  // Clear input fields in tfoot after adding a new product row

  // In other words: using event listener as a reference point empty fields on same row
  // after clicking on create product

  target.querySelector('.new-product-name input').value = '';
  target.querySelector('.new-product-price input').value = '0';
}

// after HTML is loaded

window.addEventListener('load', () => {
  const calculatePricesBtn = document.getElementById('calculate'); // select calculate button
  const removeProdBtn = document.getElementsByClassName('btn-remove'); // select remove button
  const createProdBtn = document.getElementById('create'); // select create button

  // add event listener on every remove button
  for (let i = 0; i < removeProdBtn.length; i++) {
    removeProdBtn[i].addEventListener('click', removeProduct);
  }

  // add event listener on calculate button
  calculatePricesBtn.addEventListener('click', calculateAll);

  // add event listener on create button
  createProdBtn.addEventListener('click', createProduct);
});
